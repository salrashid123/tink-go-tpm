// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.25.1
// source: proto/tinktpm.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HashType int32

const (
	HashType_UNKNOWN_HASH HashType = 0
	HashType_SHA1         HashType = 1 // https://github.com/tpm2-software/tpm2-tools/blob/master/man/common/alg.md#hashing-algorithms
	HashType_SHA384       HashType = 2
	HashType_SHA256       HashType = 3
	HashType_SHA512       HashType = 4
	HashType_SHA224       HashType = 5
)

// Enum value maps for HashType.
var (
	HashType_name = map[int32]string{
		0: "UNKNOWN_HASH",
		1: "SHA1",
		2: "SHA384",
		3: "SHA256",
		4: "SHA512",
		5: "SHA224",
	}
	HashType_value = map[string]int32{
		"UNKNOWN_HASH": 0,
		"SHA1":         1,
		"SHA384":       2,
		"SHA256":       3,
		"SHA512":       4,
		"SHA224":       5,
	}
)

func (x HashType) Enum() *HashType {
	p := new(HashType)
	*p = x
	return p
}

func (x HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tinktpm_proto_enumTypes[0].Descriptor()
}

func (HashType) Type() protoreflect.EnumType {
	return &file_proto_tinktpm_proto_enumTypes[0]
}

func (x HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashType.Descriptor instead.
func (HashType) EnumDescriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{0}
}

type TPMKey_KeyType int32

const (
	TPMKey_SYMMETRIC  TPMKey_KeyType = 0
	TPMKey_HMAC       TPMKey_KeyType = 1
	TPMKey_ASYMMETRIC TPMKey_KeyType = 2
)

// Enum value maps for TPMKey_KeyType.
var (
	TPMKey_KeyType_name = map[int32]string{
		0: "SYMMETRIC",
		1: "HMAC",
		2: "ASYMMETRIC",
	}
	TPMKey_KeyType_value = map[string]int32{
		"SYMMETRIC":  0,
		"HMAC":       1,
		"ASYMMETRIC": 2,
	}
)

func (x TPMKey_KeyType) Enum() *TPMKey_KeyType {
	p := new(TPMKey_KeyType)
	*p = x
	return p
}

func (x TPMKey_KeyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TPMKey_KeyType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tinktpm_proto_enumTypes[1].Descriptor()
}

func (TPMKey_KeyType) Type() protoreflect.EnumType {
	return &file_proto_tinktpm_proto_enumTypes[1]
}

func (x TPMKey_KeyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TPMKey_KeyType.Descriptor instead.
func (TPMKey_KeyType) EnumDescriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{0, 0}
}

type TPMKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version uint32         `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	KeyType TPMKey_KeyType `protobuf:"varint,2,opt,name=keyType,proto3,enum=proto.TPMKey_KeyType" json:"keyType,omitempty"`
	// Types that are assignable to Key:
	//
	//	*TPMKey_HmacTpmKey
	//	*TPMKey_AesCtrHmacAEADTpmKey
	//	*TPMKey_RsassaPublicKey
	//	*TPMKey_RsassaPrivateKey
	Key isTPMKey_Key `protobuf_oneof:"Key"`
}

func (x *TPMKey) Reset() {
	*x = TPMKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPMKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPMKey) ProtoMessage() {}

func (x *TPMKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPMKey.ProtoReflect.Descriptor instead.
func (*TPMKey) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{0}
}

func (x *TPMKey) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *TPMKey) GetKeyType() TPMKey_KeyType {
	if x != nil {
		return x.KeyType
	}
	return TPMKey_SYMMETRIC
}

func (m *TPMKey) GetKey() isTPMKey_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *TPMKey) GetHmacTpmKey() *HMACTpmKey {
	if x, ok := x.GetKey().(*TPMKey_HmacTpmKey); ok {
		return x.HmacTpmKey
	}
	return nil
}

func (x *TPMKey) GetAesCtrHmacAEADTpmKey() *AesCtrHmacAeadTpmKey {
	if x, ok := x.GetKey().(*TPMKey_AesCtrHmacAEADTpmKey); ok {
		return x.AesCtrHmacAEADTpmKey
	}
	return nil
}

func (x *TPMKey) GetRsassaPublicKey() *RsaSsaPkcs1PublicTpmKey {
	if x, ok := x.GetKey().(*TPMKey_RsassaPublicKey); ok {
		return x.RsassaPublicKey
	}
	return nil
}

func (x *TPMKey) GetRsassaPrivateKey() *RsaSsaPkcs1PrivateTpmKey {
	if x, ok := x.GetKey().(*TPMKey_RsassaPrivateKey); ok {
		return x.RsassaPrivateKey
	}
	return nil
}

type isTPMKey_Key interface {
	isTPMKey_Key()
}

type TPMKey_HmacTpmKey struct {
	HmacTpmKey *HMACTpmKey `protobuf:"bytes,3,opt,name=hmacTpmKey,proto3,oneof"`
}

type TPMKey_AesCtrHmacAEADTpmKey struct {
	AesCtrHmacAEADTpmKey *AesCtrHmacAeadTpmKey `protobuf:"bytes,4,opt,name=aesCtrHmacAEADTpmKey,proto3,oneof"`
}

type TPMKey_RsassaPublicKey struct {
	RsassaPublicKey *RsaSsaPkcs1PublicTpmKey `protobuf:"bytes,5,opt,name=rsassaPublicKey,proto3,oneof"`
}

type TPMKey_RsassaPrivateKey struct {
	RsassaPrivateKey *RsaSsaPkcs1PrivateTpmKey `protobuf:"bytes,6,opt,name=rsassaPrivateKey,proto3,oneof"`
}

func (*TPMKey_HmacTpmKey) isTPMKey_Key() {}

func (*TPMKey_AesCtrHmacAEADTpmKey) isTPMKey_Key() {}

func (*TPMKey_RsassaPublicKey) isTPMKey_Key() {}

func (*TPMKey_RsassaPrivateKey) isTPMKey_Key() {}

// key_type: "type.googleapis.com/github.salrashid123.tink-go-tpm.HmacTpmKey"
type HMACTpmKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      uint32            `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Name         []byte            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Keyfile      []byte            `protobuf:"bytes,3,opt,name=keyfile,proto3" json:"keyfile,omitempty"`
	PolicyDigest []byte            `protobuf:"bytes,4,opt,name=policy_digest,json=policyDigest,proto3" json:"policy_digest,omitempty"`
	KeyFormat    *HMACTpmKeyFormat `protobuf:"bytes,5,opt,name=key_format,json=keyFormat,proto3" json:"key_format,omitempty"`
}

func (x *HMACTpmKey) Reset() {
	*x = HMACTpmKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMACTpmKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMACTpmKey) ProtoMessage() {}

func (x *HMACTpmKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMACTpmKey.ProtoReflect.Descriptor instead.
func (*HMACTpmKey) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{1}
}

func (x *HMACTpmKey) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *HMACTpmKey) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *HMACTpmKey) GetKeyfile() []byte {
	if x != nil {
		return x.Keyfile
	}
	return nil
}

func (x *HMACTpmKey) GetPolicyDigest() []byte {
	if x != nil {
		return x.PolicyDigest
	}
	return nil
}

func (x *HMACTpmKey) GetKeyFormat() *HMACTpmKeyFormat {
	if x != nil {
		return x.KeyFormat
	}
	return nil
}

type HMACParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash    HashType `protobuf:"varint,1,opt,name=hash,proto3,enum=proto.HashType" json:"hash,omitempty"`
	TagSize uint32   `protobuf:"varint,2,opt,name=tag_size,json=tagSize,proto3" json:"tag_size,omitempty"`
}

func (x *HMACParams) Reset() {
	*x = HMACParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMACParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMACParams) ProtoMessage() {}

func (x *HMACParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMACParams.ProtoReflect.Descriptor instead.
func (*HMACParams) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{2}
}

func (x *HMACParams) GetHash() HashType {
	if x != nil {
		return x.Hash
	}
	return HashType_UNKNOWN_HASH
}

func (x *HMACParams) GetTagSize() uint32 {
	if x != nil {
		return x.TagSize
	}
	return 0
}

type HMACTpmKeyFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params  *HMACParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	KeySize uint32      `protobuf:"varint,2,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
}

func (x *HMACTpmKeyFormat) Reset() {
	*x = HMACTpmKeyFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HMACTpmKeyFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HMACTpmKeyFormat) ProtoMessage() {}

func (x *HMACTpmKeyFormat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HMACTpmKeyFormat.ProtoReflect.Descriptor instead.
func (*HMACTpmKeyFormat) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{3}
}

func (x *HMACTpmKeyFormat) GetParams() *HMACParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *HMACTpmKeyFormat) GetKeySize() uint32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

type AesCtrTpmKeyFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IvSize  uint32 `protobuf:"varint,1,opt,name=iv_size,json=ivSize,proto3" json:"iv_size,omitempty"`
	KeySize uint32 `protobuf:"varint,2,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
}

func (x *AesCtrTpmKeyFormat) Reset() {
	*x = AesCtrTpmKeyFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AesCtrTpmKeyFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AesCtrTpmKeyFormat) ProtoMessage() {}

func (x *AesCtrTpmKeyFormat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AesCtrTpmKeyFormat.ProtoReflect.Descriptor instead.
func (*AesCtrTpmKeyFormat) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{4}
}

func (x *AesCtrTpmKeyFormat) GetIvSize() uint32 {
	if x != nil {
		return x.IvSize
	}
	return 0
}

func (x *AesCtrTpmKeyFormat) GetKeySize() uint32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

type AesCtrTpmKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      uint32              `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	KeyFormat    *AesCtrTpmKeyFormat `protobuf:"bytes,2,opt,name=key_format,json=keyFormat,proto3" json:"key_format,omitempty"`
	Keyfile      []byte              `protobuf:"bytes,3,opt,name=keyfile,proto3" json:"keyfile,omitempty"`
	PolicyDigest []byte              `protobuf:"bytes,4,opt,name=policy_digest,json=policyDigest,proto3" json:"policy_digest,omitempty"`
}

func (x *AesCtrTpmKey) Reset() {
	*x = AesCtrTpmKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AesCtrTpmKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AesCtrTpmKey) ProtoMessage() {}

func (x *AesCtrTpmKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AesCtrTpmKey.ProtoReflect.Descriptor instead.
func (*AesCtrTpmKey) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{5}
}

func (x *AesCtrTpmKey) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AesCtrTpmKey) GetKeyFormat() *AesCtrTpmKeyFormat {
	if x != nil {
		return x.KeyFormat
	}
	return nil
}

func (x *AesCtrTpmKey) GetKeyfile() []byte {
	if x != nil {
		return x.Keyfile
	}
	return nil
}

func (x *AesCtrTpmKey) GetPolicyDigest() []byte {
	if x != nil {
		return x.PolicyDigest
	}
	return nil
}

type AesCtrHmacAeadTpmKeyFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AesFormat  *AesCtrTpmKeyFormat `protobuf:"bytes,1,opt,name=aes_format,json=aesFormat,proto3" json:"aes_format,omitempty"`
	HmacFormat *HMACTpmKeyFormat   `protobuf:"bytes,2,opt,name=hmac_format,json=hmacFormat,proto3" json:"hmac_format,omitempty"`
}

func (x *AesCtrHmacAeadTpmKeyFormat) Reset() {
	*x = AesCtrHmacAeadTpmKeyFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AesCtrHmacAeadTpmKeyFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AesCtrHmacAeadTpmKeyFormat) ProtoMessage() {}

func (x *AesCtrHmacAeadTpmKeyFormat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AesCtrHmacAeadTpmKeyFormat.ProtoReflect.Descriptor instead.
func (*AesCtrHmacAeadTpmKeyFormat) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{6}
}

func (x *AesCtrHmacAeadTpmKeyFormat) GetAesFormat() *AesCtrTpmKeyFormat {
	if x != nil {
		return x.AesFormat
	}
	return nil
}

func (x *AesCtrHmacAeadTpmKeyFormat) GetHmacFormat() *HMACTpmKeyFormat {
	if x != nil {
		return x.HmacFormat
	}
	return nil
}

// key_type:  "type.googleapis.com/github.salrashid123.tink-go-tpm.AesCtrHmacAeadTpmKey"
type AesCtrHmacAeadTpmKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      uint32                      `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Name         []byte                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	KeyFormat    *AesCtrHmacAeadTpmKeyFormat `protobuf:"bytes,2,opt,name=key_format,json=keyFormat,proto3" json:"key_format,omitempty"`
	AesCtrTpmkey *AesCtrTpmKey               `protobuf:"bytes,4,opt,name=aes_ctr_tpmkey,json=aesCtrTpmkey,proto3" json:"aes_ctr_tpmkey,omitempty"`
	HmacTpmkey   *HMACTpmKey                 `protobuf:"bytes,5,opt,name=hmac_tpmkey,json=hmacTpmkey,proto3" json:"hmac_tpmkey,omitempty"`
}

func (x *AesCtrHmacAeadTpmKey) Reset() {
	*x = AesCtrHmacAeadTpmKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AesCtrHmacAeadTpmKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AesCtrHmacAeadTpmKey) ProtoMessage() {}

func (x *AesCtrHmacAeadTpmKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AesCtrHmacAeadTpmKey.ProtoReflect.Descriptor instead.
func (*AesCtrHmacAeadTpmKey) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{7}
}

func (x *AesCtrHmacAeadTpmKey) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *AesCtrHmacAeadTpmKey) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AesCtrHmacAeadTpmKey) GetKeyFormat() *AesCtrHmacAeadTpmKeyFormat {
	if x != nil {
		return x.KeyFormat
	}
	return nil
}

func (x *AesCtrHmacAeadTpmKey) GetAesCtrTpmkey() *AesCtrTpmKey {
	if x != nil {
		return x.AesCtrTpmkey
	}
	return nil
}

func (x *AesCtrHmacAeadTpmKey) GetHmacTpmkey() *HMACTpmKey {
	if x != nil {
		return x.HmacTpmkey
	}
	return nil
}

type RsaSsaPkcs1Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashType HashType `protobuf:"varint,1,opt,name=hash_type,json=hashType,proto3,enum=proto.HashType" json:"hash_type,omitempty"`
}

func (x *RsaSsaPkcs1Params) Reset() {
	*x = RsaSsaPkcs1Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsaSsaPkcs1Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsaSsaPkcs1Params) ProtoMessage() {}

func (x *RsaSsaPkcs1Params) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsaSsaPkcs1Params.ProtoReflect.Descriptor instead.
func (*RsaSsaPkcs1Params) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{8}
}

func (x *RsaSsaPkcs1Params) GetHashType() HashType {
	if x != nil {
		return x.HashType
	}
	return HashType_UNKNOWN_HASH
}

// key_type: type.googleapis.com/github.salrashid123.tink-go-tpm.RsaSsaPkcs1PublicTpmKey
type RsaSsaPkcs1PublicTpmKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version uint32             `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Params  *RsaSsaPkcs1Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	N       []byte             `protobuf:"bytes,3,opt,name=n,proto3" json:"n,omitempty"`
	E       []byte             `protobuf:"bytes,4,opt,name=e,proto3" json:"e,omitempty"`
}

func (x *RsaSsaPkcs1PublicTpmKey) Reset() {
	*x = RsaSsaPkcs1PublicTpmKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsaSsaPkcs1PublicTpmKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsaSsaPkcs1PublicTpmKey) ProtoMessage() {}

func (x *RsaSsaPkcs1PublicTpmKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsaSsaPkcs1PublicTpmKey.ProtoReflect.Descriptor instead.
func (*RsaSsaPkcs1PublicTpmKey) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{9}
}

func (x *RsaSsaPkcs1PublicTpmKey) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RsaSsaPkcs1PublicTpmKey) GetParams() *RsaSsaPkcs1Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RsaSsaPkcs1PublicTpmKey) GetN() []byte {
	if x != nil {
		return x.N
	}
	return nil
}

func (x *RsaSsaPkcs1PublicTpmKey) GetE() []byte {
	if x != nil {
		return x.E
	}
	return nil
}

// key_type: type.googleapis.com/github.salrashid123.tink-go-tpm.RsaSsaPkcs1PrivateTpmKey
type RsaSsaPkcs1PrivateTpmKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version      uint32                   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	PublicKey    *RsaSsaPkcs1PublicTpmKey `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Keyfile      []byte                   `protobuf:"bytes,3,opt,name=keyfile,proto3" json:"keyfile,omitempty"`
	PolicyDigest []byte                   `protobuf:"bytes,4,opt,name=policy_digest,json=policyDigest,proto3" json:"policy_digest,omitempty"`
}

func (x *RsaSsaPkcs1PrivateTpmKey) Reset() {
	*x = RsaSsaPkcs1PrivateTpmKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsaSsaPkcs1PrivateTpmKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsaSsaPkcs1PrivateTpmKey) ProtoMessage() {}

func (x *RsaSsaPkcs1PrivateTpmKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsaSsaPkcs1PrivateTpmKey.ProtoReflect.Descriptor instead.
func (*RsaSsaPkcs1PrivateTpmKey) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{10}
}

func (x *RsaSsaPkcs1PrivateTpmKey) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RsaSsaPkcs1PrivateTpmKey) GetPublicKey() *RsaSsaPkcs1PublicTpmKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *RsaSsaPkcs1PrivateTpmKey) GetKeyfile() []byte {
	if x != nil {
		return x.Keyfile
	}
	return nil
}

func (x *RsaSsaPkcs1PrivateTpmKey) GetPolicyDigest() []byte {
	if x != nil {
		return x.PolicyDigest
	}
	return nil
}

type RsaSsaPkcs1KeyTpmFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Params            *RsaSsaPkcs1Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	ModulusSizeInBits uint32             `protobuf:"varint,2,opt,name=modulus_size_in_bits,json=modulusSizeInBits,proto3" json:"modulus_size_in_bits,omitempty"`
	PublicExponent    []byte             `protobuf:"bytes,3,opt,name=public_exponent,json=publicExponent,proto3" json:"public_exponent,omitempty"`
}

func (x *RsaSsaPkcs1KeyTpmFormat) Reset() {
	*x = RsaSsaPkcs1KeyTpmFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tinktpm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RsaSsaPkcs1KeyTpmFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RsaSsaPkcs1KeyTpmFormat) ProtoMessage() {}

func (x *RsaSsaPkcs1KeyTpmFormat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tinktpm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RsaSsaPkcs1KeyTpmFormat.ProtoReflect.Descriptor instead.
func (*RsaSsaPkcs1KeyTpmFormat) Descriptor() ([]byte, []int) {
	return file_proto_tinktpm_proto_rawDescGZIP(), []int{11}
}

func (x *RsaSsaPkcs1KeyTpmFormat) GetParams() *RsaSsaPkcs1Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *RsaSsaPkcs1KeyTpmFormat) GetModulusSizeInBits() uint32 {
	if x != nil {
		return x.ModulusSizeInBits
	}
	return 0
}

func (x *RsaSsaPkcs1KeyTpmFormat) GetPublicExponent() []byte {
	if x != nil {
		return x.PublicExponent
	}
	return nil
}

var File_proto_tinktpm_proto protoreflect.FileDescriptor

var file_proto_tinktpm_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x69, 0x6e, 0x6b, 0x74, 0x70, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x03, 0x0a,
	0x06, 0x54, 0x50, 0x4d, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x50, 0x4d, 0x4b, 0x65,
	0x79, 0x2e, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x68, 0x6d, 0x61, 0x63, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x4d, 0x41, 0x43, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x68, 0x6d, 0x61,
	0x63, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x65, 0x73, 0x43, 0x74,
	0x72, 0x48, 0x6d, 0x61, 0x63, 0x41, 0x45, 0x41, 0x44, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x65,
	0x73, 0x43, 0x74, 0x72, 0x48, 0x6d, 0x61, 0x63, 0x41, 0x65, 0x61, 0x64, 0x54, 0x70, 0x6d, 0x4b,
	0x65, 0x79, 0x48, 0x00, 0x52, 0x14, 0x61, 0x65, 0x73, 0x43, 0x74, 0x72, 0x48, 0x6d, 0x61, 0x63,
	0x41, 0x45, 0x41, 0x44, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x0f, 0x72, 0x73,
	0x61, 0x73, 0x73, 0x61, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x73, 0x61, 0x53,
	0x73, 0x61, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x70, 0x6d,
	0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x73, 0x61, 0x73, 0x73, 0x61, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x10, 0x72, 0x73, 0x61, 0x73, 0x73, 0x61,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x73, 0x61, 0x53, 0x73, 0x61, 0x50,
	0x6b, 0x63, 0x73, 0x31, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x54, 0x70, 0x6d, 0x4b, 0x65,
	0x79, 0x48, 0x00, 0x52, 0x10, 0x72, 0x73, 0x61, 0x73, 0x73, 0x61, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x32, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x4d, 0x41, 0x43, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x53, 0x59,
	0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x02, 0x42, 0x05, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x48, 0x4d, 0x41, 0x43, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6b, 0x65, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6b, 0x65, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a,
	0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x4d, 0x41, 0x43, 0x54, 0x70, 0x6d,
	0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x22, 0x4c, 0x0a, 0x0a, 0x48, 0x4d, 0x41, 0x43, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x61, 0x67, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x58, 0x0a, 0x10, 0x48, 0x4d, 0x41, 0x43, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x4d, 0x41, 0x43, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x48, 0x0a, 0x12,
	0x41, 0x65, 0x73, 0x43, 0x74, 0x72, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x76, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x76, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0c, 0x41, 0x65, 0x73, 0x43, 0x74,
	0x72, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x65,
	0x73, 0x43, 0x74, 0x72, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b,
	0x65, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65,
	0x79, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x1a, 0x41,
	0x65, 0x73, 0x43, 0x74, 0x72, 0x48, 0x6d, 0x61, 0x63, 0x41, 0x65, 0x61, 0x64, 0x54, 0x70, 0x6d,
	0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x61, 0x65, 0x73,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x65, 0x73, 0x43, 0x74, 0x72, 0x54, 0x70, 0x6d, 0x4b,
	0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x09, 0x61, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x4d, 0x41, 0x43, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x0a, 0x68, 0x6d, 0x61, 0x63, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xf5, 0x01,
	0x0a, 0x14, 0x41, 0x65, 0x73, 0x43, 0x74, 0x72, 0x48, 0x6d, 0x61, 0x63, 0x41, 0x65, 0x61, 0x64,
	0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x65, 0x73, 0x43, 0x74, 0x72, 0x48, 0x6d, 0x61, 0x63, 0x41, 0x65, 0x61, 0x64, 0x54,
	0x70, 0x6d, 0x4b, 0x65, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x09, 0x6b, 0x65, 0x79,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x61, 0x65, 0x73, 0x5f, 0x63, 0x74,
	0x72, 0x5f, 0x74, 0x70, 0x6d, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x65, 0x73, 0x43, 0x74, 0x72, 0x54, 0x70, 0x6d,
	0x4b, 0x65, 0x79, 0x52, 0x0c, 0x61, 0x65, 0x73, 0x43, 0x74, 0x72, 0x54, 0x70, 0x6d, 0x6b, 0x65,
	0x79, 0x12, 0x32, 0x0a, 0x0b, 0x68, 0x6d, 0x61, 0x63, 0x5f, 0x74, 0x70, 0x6d, 0x6b, 0x65, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x4d, 0x41, 0x43, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x68, 0x6d, 0x61, 0x63, 0x54,
	0x70, 0x6d, 0x6b, 0x65, 0x79, 0x22, 0x41, 0x0a, 0x11, 0x52, 0x73, 0x61, 0x53, 0x73, 0x61, 0x50,
	0x6b, 0x63, 0x73, 0x31, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x52, 0x73, 0x61,
	0x53, 0x73, 0x61, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x70,
	0x6d, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x73, 0x61, 0x53, 0x73, 0x61, 0x50, 0x6b, 0x63,
	0x73, 0x31, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x6e, 0x12, 0x0c,
	0x0a, 0x01, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x65, 0x22, 0xb2, 0x01, 0x0a,
	0x18, 0x52, 0x73, 0x61, 0x53, 0x73, 0x61, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x73, 0x61, 0x53, 0x73, 0x61, 0x50, 0x6b, 0x63, 0x73, 0x31, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x54, 0x70, 0x6d, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x52, 0x73, 0x61, 0x53, 0x73, 0x61, 0x50, 0x6b, 0x63, 0x73,
	0x31, 0x4b, 0x65, 0x79, 0x54, 0x70, 0x6d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x30, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x73, 0x61, 0x53, 0x73, 0x61, 0x50, 0x6b, 0x63, 0x73,
	0x31, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x2f, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x69, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x69, 0x74, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x45, 0x78, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2a, 0x56, 0x0a, 0x08, 0x48, 0x61, 0x73,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x48, 0x41, 0x31, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41,
	0x35, 0x31, 0x32, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x32, 0x32, 0x34, 0x10,
	0x05, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x61, 0x6c, 0x72, 0x61, 0x73, 0x68, 0x69, 0x64, 0x31, 0x32, 0x33, 0x2f, 0x74, 0x69, 0x6e,
	0x6b, 0x2d, 0x67, 0x6f, 0x2d, 0x74, 0x70, 0x6d, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tinktpm_proto_rawDescOnce sync.Once
	file_proto_tinktpm_proto_rawDescData = file_proto_tinktpm_proto_rawDesc
)

func file_proto_tinktpm_proto_rawDescGZIP() []byte {
	file_proto_tinktpm_proto_rawDescOnce.Do(func() {
		file_proto_tinktpm_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tinktpm_proto_rawDescData)
	})
	return file_proto_tinktpm_proto_rawDescData
}

var file_proto_tinktpm_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_tinktpm_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_proto_tinktpm_proto_goTypes = []interface{}{
	(HashType)(0),                      // 0: proto.HashType
	(TPMKey_KeyType)(0),                // 1: proto.TPMKey.KeyType
	(*TPMKey)(nil),                     // 2: proto.TPMKey
	(*HMACTpmKey)(nil),                 // 3: proto.HMACTpmKey
	(*HMACParams)(nil),                 // 4: proto.HMACParams
	(*HMACTpmKeyFormat)(nil),           // 5: proto.HMACTpmKeyFormat
	(*AesCtrTpmKeyFormat)(nil),         // 6: proto.AesCtrTpmKeyFormat
	(*AesCtrTpmKey)(nil),               // 7: proto.AesCtrTpmKey
	(*AesCtrHmacAeadTpmKeyFormat)(nil), // 8: proto.AesCtrHmacAeadTpmKeyFormat
	(*AesCtrHmacAeadTpmKey)(nil),       // 9: proto.AesCtrHmacAeadTpmKey
	(*RsaSsaPkcs1Params)(nil),          // 10: proto.RsaSsaPkcs1Params
	(*RsaSsaPkcs1PublicTpmKey)(nil),    // 11: proto.RsaSsaPkcs1PublicTpmKey
	(*RsaSsaPkcs1PrivateTpmKey)(nil),   // 12: proto.RsaSsaPkcs1PrivateTpmKey
	(*RsaSsaPkcs1KeyTpmFormat)(nil),    // 13: proto.RsaSsaPkcs1KeyTpmFormat
}
var file_proto_tinktpm_proto_depIdxs = []int32{
	1,  // 0: proto.TPMKey.keyType:type_name -> proto.TPMKey.KeyType
	3,  // 1: proto.TPMKey.hmacTpmKey:type_name -> proto.HMACTpmKey
	9,  // 2: proto.TPMKey.aesCtrHmacAEADTpmKey:type_name -> proto.AesCtrHmacAeadTpmKey
	11, // 3: proto.TPMKey.rsassaPublicKey:type_name -> proto.RsaSsaPkcs1PublicTpmKey
	12, // 4: proto.TPMKey.rsassaPrivateKey:type_name -> proto.RsaSsaPkcs1PrivateTpmKey
	5,  // 5: proto.HMACTpmKey.key_format:type_name -> proto.HMACTpmKeyFormat
	0,  // 6: proto.HMACParams.hash:type_name -> proto.HashType
	4,  // 7: proto.HMACTpmKeyFormat.params:type_name -> proto.HMACParams
	6,  // 8: proto.AesCtrTpmKey.key_format:type_name -> proto.AesCtrTpmKeyFormat
	6,  // 9: proto.AesCtrHmacAeadTpmKeyFormat.aes_format:type_name -> proto.AesCtrTpmKeyFormat
	5,  // 10: proto.AesCtrHmacAeadTpmKeyFormat.hmac_format:type_name -> proto.HMACTpmKeyFormat
	8,  // 11: proto.AesCtrHmacAeadTpmKey.key_format:type_name -> proto.AesCtrHmacAeadTpmKeyFormat
	7,  // 12: proto.AesCtrHmacAeadTpmKey.aes_ctr_tpmkey:type_name -> proto.AesCtrTpmKey
	3,  // 13: proto.AesCtrHmacAeadTpmKey.hmac_tpmkey:type_name -> proto.HMACTpmKey
	0,  // 14: proto.RsaSsaPkcs1Params.hash_type:type_name -> proto.HashType
	10, // 15: proto.RsaSsaPkcs1PublicTpmKey.params:type_name -> proto.RsaSsaPkcs1Params
	11, // 16: proto.RsaSsaPkcs1PrivateTpmKey.public_key:type_name -> proto.RsaSsaPkcs1PublicTpmKey
	10, // 17: proto.RsaSsaPkcs1KeyTpmFormat.params:type_name -> proto.RsaSsaPkcs1Params
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_tinktpm_proto_init() }
func file_proto_tinktpm_proto_init() {
	if File_proto_tinktpm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_tinktpm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPMKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tinktpm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMACTpmKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tinktpm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMACParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tinktpm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HMACTpmKeyFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tinktpm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AesCtrTpmKeyFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tinktpm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AesCtrTpmKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tinktpm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AesCtrHmacAeadTpmKeyFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tinktpm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AesCtrHmacAeadTpmKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tinktpm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsaSsaPkcs1Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tinktpm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsaSsaPkcs1PublicTpmKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tinktpm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsaSsaPkcs1PrivateTpmKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tinktpm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RsaSsaPkcs1KeyTpmFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_tinktpm_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TPMKey_HmacTpmKey)(nil),
		(*TPMKey_AesCtrHmacAEADTpmKey)(nil),
		(*TPMKey_RsassaPublicKey)(nil),
		(*TPMKey_RsassaPrivateKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tinktpm_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tinktpm_proto_goTypes,
		DependencyIndexes: file_proto_tinktpm_proto_depIdxs,
		EnumInfos:         file_proto_tinktpm_proto_enumTypes,
		MessageInfos:      file_proto_tinktpm_proto_msgTypes,
	}.Build()
	File_proto_tinktpm_proto = out.File
	file_proto_tinktpm_proto_rawDesc = nil
	file_proto_tinktpm_proto_goTypes = nil
	file_proto_tinktpm_proto_depIdxs = nil
}
